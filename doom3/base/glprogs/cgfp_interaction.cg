
// Doom3 interaction fragment shader
// Cass Everitt

float2 CenterScale( float2 inTC, float2 centerScale ) {
	float scaleX = centerScale.x;
	float scaleY = centerScale.y;
	float4 tc0 = float4( scaleX, 0, 0, 0.5 - ( 0.5f * scaleX ) );
	float4 tc1 = float4( 0, scaleY, 0, 0.5 - ( 0.5f * scaleY ) );

	float2 finalTC;
	finalTC.x = dot4( inTC, tc0 );
	finalTC.y = dot4( inTC, tc1 );
	return finalTC;
}

float2 Rotate2D( float2 inTC, float2 cs ) {
	float sinValue = cs.y;
	float cosValue = cs.x;

	float4 tc0 = float4( cosValue, -sinValue, 0, ( -0.5f * cosValue ) + ( 0.5f * sinValue ) + 0.5f );
	float4 tc1 = float4( sinValue, cosValue, 0, ( -0.5f * sinValue ) + ( -0.5f * cosValue ) + 0.5f );

	float2 finalTC;
	finalTC.x = dot4( inTC, tc0 );
	finalTC.y = dot4( inTC, tc1 );
	return finalTC;
}

// better noise function available at https://github.com/ashima/webgl-noise
float rand( float2 co ) {
    return fract( sin( dot( co.xy, float2( 12.9898, 78.233 ) ) ) * 43758.5453 );
}

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	float PI = 3.14159265359;

	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
} 

void main( 
           float4      primaryColor       : COLOR0,
	   float3      lightVector        : TEXCOORD0,
	   float2      bumpST   	  : TEXCOORD1,
           float2      lightFalloff       : TEXCOORD2,
	   float3      lightProjection    : TEXCOORD3,
	   float2      diffuseST	  : TEXCOORD4,
	   float2      specularST	  : TEXCOORD5,
	   float3      halfAngleVector    : TEXCOORD6,
	   float3  	   cameraVector : TEXCOORD7,
           uniform float4 diffuse : ENV0,
	   uniform float4 specular : ENV1,
	   uniform sampler2D   bumpImage : TEXUNIT1,
	   uniform sampler2D   lightFalloffImage  : TEXUNIT2,
	   uniform sampler2D   lightImage  : TEXUNIT3,
	   uniform sampler2D   diffuseImage  : TEXUNIT4,
	   uniform sampler2D   specularImage  : TEXUNIT5,
	   uniform samplerCUBE normalCubeMapImage : TEXUNIT0,
	   uniform sampler2D   specularTableImage : TEXUNIT6,
           out float4  color : COLOR)
{
   float3 L = texCUBE( normalCubeMapImage, lightVector ).xyz * 2 - 1;
   float4 bumpMap = tex2D( bumpImage, bumpST );
   float3 N = normalize(float3(bumpMap.y, bumpMap.z, bumpMap.w) * 2 - 1);
   float  NdotL = clamp( dot( N, L ), 0, 1 );

   float4 Cd = diffuse * tex2D( diffuseImage, diffuseST );

   float3 H = texCUBE( normalCubeMapImage, halfAngleVector ).xyz * 2 - 1;
   float3 NdotH = clamp( dot( N, H ), 0, 1 );


   float4 specTex = tex2D( specularImage, specularST );
   float4 roughness = float4(specTex.r, specTex.r, specTex.r, specTex.r);
   float4 metallic = float4(specTex.g, specTex.g, specTex.g, specTex.g);

   float4 Cl = tex2Dproj( lightImage, lightProjection ) *
               tex2D( lightFalloffImage, lightFalloff);
			   
	float3 V = normalize(cameraVector);

	float3 F0 = float3(0.04); 
	F0 = mix(F0, Cd.xyz, metallic.xyz);
			
	// cook-torrance brdf
	float NDF = DistributionGGX(N, H, roughness);        
	float G   = GeometrySmith(N, V, L, roughness);      
	float3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);       
			
	float3 kS = F;
	float3 kD = float3(1.0) - kS;
	kD *= 1.0 - metallic;	  
			
	float3 numerator    = NDF * G * F;
	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
	float3 pbr     = numerator / max(denominator, 0.001);  

   color = primaryColor * Cl * NdotL * Cd + (float4(pbr.x, pbr.y, pbr.z, 0.0) * (specular * Cl));
}

